"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const zigbee_clusters_1 = require("zigbee-clusters");
async function initIasZoneDevice(device, zclNode, capabilityIds, statusParsers, endpointId) {
    if (statusParsers.length !== capabilityIds.length) {
        throw new Error('Amount of capabilities and flag names should match!');
    }
    const endpoint = endpointId ?? device.getClusterEndpoint(zigbee_clusters_1.IASZoneCluster) ?? 1;
    device.log(`Initialising IasZone on endpoint ${endpoint}`);
    const cluster = zclNode.endpoints[endpoint]
        .clusters[zigbee_clusters_1.IASZoneCluster.NAME];
    // Register enroll request listener for automatic enrollment
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore Dynamic event handler
    cluster.onZoneEnrollRequest = (payload) => {
        device.log('Zone enroll request received', payload);
        cluster
            .zoneEnrollResponse({
            enrollResponseCode: 'success',
            zoneId: Math.floor(Math.random() * 255),
        }, { waitForResponse: false })
            .catch(e => device.error('Failed to write response', e));
    };
    // Register zone state change notification
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore Dynamic event handler
    cluster.onZoneStatusChangeNotification = async (payload) => {
        const flags = payload.zoneStatus.getBits();
        // device.log('Zone status change notification received', payload);
        for (let i = 0; i < capabilityIds.length; i++) {
            const capabilityId = capabilityIds[i];
            const statusParser = statusParsers[i];
            if (typeof statusParser == 'string') {
                await device.setCapabilityValue(capabilityId, flags.includes(statusParser));
            }
            else {
                await device.setCapabilityValue(capabilityId, await statusParser(payload));
            }
        }
    };
    device.log(`Initialised IasZone on endpoint ${endpoint}, waiting for zone enroll request`);
}
exports.default = initIasZoneDevice;
