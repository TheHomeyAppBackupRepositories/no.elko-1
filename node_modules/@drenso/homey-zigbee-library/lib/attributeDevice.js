"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initWriteOnlyCapability = exports.initReadOnlyCapability = exports.initReadCommandCapability = exports.initReadWriteCapability = exports.readInitialValue = void 0;
const defaultSetParser = (x) => x;
const defaultReportParser = (x) => x;
async function readInitialValue(device, zclNode, capabilityId, cluster, attributeName, reportParser, endpointId) {
    const endpoint = endpointId ?? device.getClusterEndpoint(cluster) ?? 1;
    await zclNode
        .endpoints[endpoint]
        .clusters[cluster.NAME]
        .readAttributes([attributeName])
        .then(async (result) => {
        await device
            .setCapabilityValue(capabilityId, await reportParser(result[attributeName]))
            .catch(e => device.error('Failed to set', capabilityId, 'capability', e));
    })
        .catch(e => device.error('Failed to read', attributeName, 'from', cluster.NAME, e));
}
exports.readInitialValue = readInitialValue;
async function initReadWriteCapability(device, zclNode, capabilityId, cluster, attributeName, reportParser = defaultReportParser, setParser = defaultSetParser, minChange, maxInterval, endpointId) {
    const endpoint = endpointId ?? device.getClusterEndpoint(cluster) ?? 1;
    // Retrieve initial value
    await readInitialValue(device, zclNode, capabilityId, cluster, attributeName, reportParser, endpoint);
    // Configure reading the capability
    device.registerCapability(capabilityId, cluster, {
        endpoint,
        get: attributeName,
        getOpts: {
            getOnStart: false,
        },
        report: attributeName,
        reportOpts: {
            configureAttributeReporting: {
                minInterval: 0,
                maxInterval: maxInterval ?? 3600,
                minChange: minChange ?? 1,
            },
        },
        reportParser,
    });
    // Configure writing the capability
    device.registerCapabilityListener(capabilityId, async (value) => {
        const attributeValue = setParser(value);
        await device.zclNode.endpoints[endpoint].clusters[cluster.NAME].writeAttributes({
            [attributeName]: attributeValue,
        });
    });
    await device.log(capabilityId, 'initialized');
}
exports.initReadWriteCapability = initReadWriteCapability;
async function initReadCommandCapability(device, zclNode, capabilityId, cluster, commandName, commandArgParser = defaultSetParser, attributeName, reportParser = defaultReportParser, minChange, endpointId) {
    const endpoint = endpointId ?? device.getClusterEndpoint(cluster) ?? 1;
    // Retrieve initial value
    await readInitialValue(device, zclNode, capabilityId, cluster, attributeName, reportParser, endpoint);
    // Configure the capability
    device.registerCapability(capabilityId, cluster, {
        endpoint,
        get: attributeName,
        getOpts: {
            getOnStart: false,
        },
        set: commandName,
        setParser: commandArgParser,
        report: attributeName,
        reportOpts: {
            configureAttributeReporting: {
                minInterval: 0,
                maxInterval: 3600,
                minChange: minChange ?? 1,
            },
        },
        reportParser,
    });
    device.log(capabilityId, 'initialized');
}
exports.initReadCommandCapability = initReadCommandCapability;
async function initReadOnlyCapability(device, zclNode, capabilityId, cluster, attributeName, reportParser = defaultReportParser, minChange, maxInterval, endpointId) {
    const endpoint = endpointId ?? device.getClusterEndpoint(cluster) ?? 1;
    // Retrieve initial value
    await readInitialValue(device, zclNode, capabilityId, cluster, attributeName, reportParser, endpoint);
    // Configure the capability
    device.registerCapability(capabilityId, cluster, {
        endpoint,
        get: attributeName,
        getOpts: {
            getOnStart: false,
        },
        report: attributeName,
        reportOpts: {
            configureAttributeReporting: {
                minInterval: 0,
                maxInterval: maxInterval ?? 3600,
                minChange: minChange ?? 1,
            },
        },
        reportParser,
    });
    device.log(capabilityId, 'initialized');
}
exports.initReadOnlyCapability = initReadOnlyCapability;
async function initWriteOnlyCapability(device, zclNode, capabilityId, cluster, setName, setParser = defaultSetParser, endpointId) {
    const endpoint = endpointId ?? device.getClusterEndpoint(cluster) ?? 1;
    // Configure the capability
    device.registerCapability(capabilityId, cluster, {
        endpoint,
        set: setName,
        setParser,
    });
    device.log(capabilityId, 'initialized');
}
exports.initWriteOnlyCapability = initWriteOnlyCapability;
