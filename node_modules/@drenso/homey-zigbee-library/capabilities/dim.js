"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const zigbee_clusters_1 = require("zigbee-clusters");
const attributeDevice_1 = require("../lib/attributeDevice");
async function initDimDevice(device, zclNode, { capabilityId = 'dim', onOffCapabilityId = 'onoff', maxDimValue = 0xFE, minChange, endpointId, } = {}) {
    await (0, attributeDevice_1.initReadCommandCapability)(device, zclNode, capabilityId, zigbee_clusters_1.CLUSTER.LEVEL_CONTROL, 'moveToLevelWithOnOff', async (value, opts) => {
        return {
            level: Math.round(value * maxDimValue),
            transitionTime: calculateDimDuration(opts?.duration),
        };
    }, 'currentLevel', async (value) => {
        // Value comes from uint8
        // Check for valid values
        if (value < 0 || value > maxDimValue) {
            device.error('Dim value outside valid range');
            return null;
        }
        await device.setCapabilityValue(onOffCapabilityId, value > 0);
        return value / maxDimValue;
    }, minChange, endpointId);
}
exports.default = initDimDevice;
function calculateDimDuration(durationSetting) {
    if (durationSetting === undefined) {
        // Use the default transition time of the device
        return 0xFFFF;
    }
    // Convert from milliseconds to tenth of second, then cap the range between 0 and 65534
    return Math.max(Math.min(durationSetting / 100, 65534), 0);
}
